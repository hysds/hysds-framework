version: 2.1
jobs:
  test:
    docker:
      - image: hysds/pge-base:latest
    steps:
      - checkout
      - run:
          name: Test
          command: |
            source $HOME/verdi/bin/activate
            pip install pytest
            echo 'export PYTHONPATH="$CIRCLE_WORKING_DIRECTORY:$PYTHONPATH"' >> $BASH_ENV
            source $BASH_ENV
            pytest
  build:
    docker:
      - image: docker:stable-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              python-dev py-pip bash pigz build-base libffi-dev openssl-dev
            pip install \
              docker-compose awscli
      - run:
          name: Build
          command: |
            git clone https://github.com/hysds/hysds-dockerfiles.git
            cd hysds-dockerfiles
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            #./build_release.sh $CIRCLE_TAG hysds master
            mkdir images
            echo "test.txt" > images/test.txt
            mv images ..
      - persist_to_workspace:
          root: images
          paths:
            - "*"
  deploy:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              curl file
      - attach_workspace:
          at: hysds-dockerfiles
      - run:
          name: Deploy
          command: |
            cd images
            owner=hysds
            repo=hysds-dockerfiles
            release_id=$(curl -s -H "Authorization: token $GIT_OAUTH_TOKEN" \
              "https://api.github.com/repos/${owner}/${repo}/releases/latest" \
              | grep '^  "id":' | awk '{print $2}' | sed 's/,//')
            file=hysds-verdi-${CIRCLE_TAG}.tar.gz
            echo $file
            echo $CIRCLE_PROJECT_REPONAME
            echo $CIRCLE_PROJECT_USERNAME
            pwd
            ls -al
            #echo curl -H "Authorization: token $GIT_OAUTH_TOKEN" -H \
            #  "Content-type: $(file -b --mime-type ${file})" \
            #  --data-binary @${file} \
            #  "https://uploads.github.com/repos/${owner}/${repo}/releases/${release_id}/assets?name=${file}"
            cat test.txt

workflows:
  version: 2
  test:
    jobs:
      - test
  weekly:
    triggers:
      - schedule:
          cron: "0 7 * * 0"
          filters:
            branches:
              only:
                - develop
    jobs:
      - test:
          filters:
            branches:
              only: develop
  build-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
      - deploy:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
